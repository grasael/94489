# -*- coding: utf-8 -*-
"""w12_cleaning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U1-elnO2kNxctlXTsfeXyY8_0RfslboX
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

projects = pd.read_csv("dataset/projects.csv")
outcomes = pd.read_csv("dataset/outcomes.csv")
essays = pd.read_csv("dataset/essays_info.csv")

projects.head()

outcomes.head()

essays.head()

print(f"Initial projects size: {projects.shape}")
print(f"Initial outcomes size: {outcomes.shape}")
print(f"Initial essays size: {essays.shape}")

fully_funded = outcomes[["projectid", "fully_funded"]]

def flip(bool):
    if bool == "t": return 0
    elif bool == "f": return 1
    else: return bool

fully_funded["not_fully_funded"] = fully_funded["fully_funded"].apply(flip).astype('category')

fully_funded = fully_funded.drop(columns=["fully_funded"])
fully_funded.head()

projects_new = projects[["projectid",
                         "primary_focus_subject",
                         "poverty_level",
                         "students_reached",
                         "resource_type",
                         "fulfillment_labor_materials",
                         "school_state",
                         "school_charter",
                         "school_magnet",
                         "school_year_round",
                         "school_nlns",
                         "school_kipp",
                         "school_charter_ready_promise",
                         "grade_level"]]

def convert(s):
    if s == "t": return 1
    elif s == "f": return 0
    else: return s

projects_new["school_charter"] = projects_new["school_charter"].apply(convert).astype('category')
projects_new["school_magnet"] = projects_new["school_magnet"].apply(convert).astype('category')
projects_new["school_year_round"] = projects_new["school_year_round"].apply(convert).astype('category')
projects_new["school_nlns"] = projects_new["school_nlns"].apply(convert).astype('category')
projects_new["school_kipp"] = projects_new["school_kipp"].apply(convert).astype('category')
projects_new["school_charter_ready_promise"] = projects_new["school_charter_ready_promise"].apply(convert).astype('category')

projects_new.head()

data = projects_new.merge(fully_funded, how="inner", on="projectid").merge(essays, how = "inner", on="projectid").drop(columns = ["projectid", "teacher_acctid"]).dropna()
data.head()

data.shape

data.info()

def important_project(row):
  if (row['primary_focus_subject'] in ['Mathematics', 'Literature & Writing', 'College & Career Prep', 'Parent Involvement', 'Literacy']) & (row['poverty_level'] in ['highest poverty', 'high poverty']):
    return "yes"
  else:
    return "no"

data["important"] = data.apply(important_project, axis = 1)

len(data[data["important"] == 'yes'])

data_imp = data[data["important"] == "yes"].drop(columns = ["important", "primary_focus_subject", "poverty_level"])

print(f"Size after filtering important and dropping specified columns: {data_imp.shape}")

data_imp.head()

data_imp.not_fully_funded.value_counts()

data_imp["need_statement"] = data_imp["need_statement"].str.replace('\r', '')

data_imp.iloc[31]["need_statement"]

data_imp.to_csv("data_imp.csv", index = False)

